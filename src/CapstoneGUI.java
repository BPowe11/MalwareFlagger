import java.awt.event.*;
import javax.swing.*;
import java.lang.Runtime;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.event.MouseInputAdapter;

import org.w3c.dom.events.MouseEvent;

import java.io.File;

public class CapstoneGUI{
    static String filePath = "";
    static String file;
    File fileOBJ;
    JTextField userInputField;
    
    static JLabel MalwareFlag = new JLabel();
    
    static JButton deleteButton = new JButton("Delete File");
    JButton openExplorer = new JButton("Open File Explorer");

    JPanel panel = new JPanel();
    JPanel userInput = new JPanel();
    JPanel details = new JPanel();
    JPanel statusPanel = new JPanel();
    JPanel superMainPanel = new JPanel();
    static JLabel positives =new JLabel();
    static JLabel totalScans = new JLabel();
    JPanel subJPanel = new JPanel();

    static JLabel appStatus = new JLabel();
    ImageIcon appIcon = new ImageIcon("lib/flagIcon.png");
    
    static JLabel suggestedInput = new JLabel("Please enter file path: ");
    
    public CapstoneGUI(){
       
        JFrame frame = new JFrame("Malware Flagger App");
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        createUI(frame);
        frame.setSize(650,200);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        frame.setIconImage(appIcon.getImage());
        frame.setIconImage(appIcon.getImage());

        JPopupMenu rightClickMenu = new JPopupMenu("Menu");

        JMenuItem cut = new JMenuItem("Cut");
        JMenuItem copy = new JMenuItem("Copy");
        JMenuItem paste = new JMenuItem("Paste");

        rightClickMenu.add(cut);
        rightClickMenu.add(copy);
        rightClickMenu.add(paste);
    }
   
   
    private void createUI(JFrame frame){
        userInputField = new JTextField(20);
        userInput.setLayout(new FlowLayout());
        superMainPanel.setLayout(new BoxLayout(superMainPanel,BoxLayout.Y_AXIS));
        statusPanel.setLayout(new BoxLayout(statusPanel, BoxLayout.Y_AXIS));
        subJPanel.setLayout(new BoxLayout(subJPanel, BoxLayout.Y_AXIS));
        panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));
        details.setLayout(new BoxLayout(details, BoxLayout.Y_AXIS));
        JButton submitButton = new JButton("Submit");
       
        submitButton.setPreferredSize(new Dimension(80, 19));
        openExplorer.setBackground(Color.YELLOW);
        openExplorer.setPreferredSize(new Dimension(140,25));
       
        
        submitButton.addActionListener((e)-> {
            try {
                submitAction();
            } catch (NoSuchAlgorithmException e1) {

                e1.printStackTrace();
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        });

        openExplorer.addActionListener((e)-> {
            try {
                openFileExplorer();
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        });

        deleteButton.addActionListener((e)->{
            deleteAction();
        });
        superMainPanel.add(userInput);
        superMainPanel.add(openExplorer);
        userInput.add(suggestedInput);
        userInput.add(userInputField);
        userInput.add(submitButton);
        deleteButton.setVisible(false);

        deleteButton.setBackground(Color.white);
        deleteButton.setForeground(Color.red);
        subJPanel.add(deleteButton);
        details.add(MalwareFlag);
        details.add(positives);
        details.add(totalScans);
        frame.getContentPane().add(details, BorderLayout.SOUTH);
        frame.getContentPane().add(superMainPanel, BorderLayout.NORTH);
        frame.getContentPane().add(subJPanel, BorderLayout.LINE_END);
        frame.getContentPane().add(panel, BorderLayout.EAST);
    }
    
    
    private void submitAction() throws NoSuchAlgorithmException, IOException{
        appStatus.setText("Button Clicked");
        System.out.println("submitButton Clicked");
        deleteButton.setVisible(true);
        MalwareFlag.setVisible(true);
        positives.setVisible(true);
        totalScans.setVisible(true);

        statusUpdater("submitButton Clicked");
        
        int data[] = new int[5];
        suggestedInput.setText("Please enter file path: ");
        filePath = userInputField.getText();
        file = FileHasher.userInputEditor(filePath);
        String hashedFile = FileHasher.getHexString(file);
        data = VirusTotalAPIRetriever.obtainIntDataArray(hashedFile);
        int positveFlags = data[0];
        int total = data[1];
        positives.setText("Positives Hits: " + positveFlags);
        totalScans.setText("Total Scans: " + total);
        if(VirusTotalAPIRetriever.positiveAlarm(positveFlags)==true){
            MalwareFlag.setText("This has been flagged as malware! Please remove file!");
            System.out.println("flag raised");
            statusUpdater("flag raised");
        }
        else{
            MalwareFlag.setText("This file has not matched any known malware hashes");
            System.out.println("flags not raised");
            statusUpdater("flag not raised");
        }
        statusUpdater("File Scan Complete");
    }
    
    private void deleteAction(){
        fileOBJ = FileRemover.getFile(file);
        String isDeleted = FileRemover.deleteThisFile(fileOBJ);
        MalwareFlag.setText(isDeleted);
        deleteButton.setVisible(false);
        positives.setVisible(false);
        totalScans.setVisible(false);
    }

    private void openFileExplorer() throws IOException{
        Runtime runtime = Runtime.getRuntime();
        try {
            runtime.exec("explorer.exe", null);
        } catch (Exception e) {
            runtime.exec("open /System/Library/CoreServices/finder.app",null);
        }

    }

    public static void tryAgainCatch(){
        suggestedInput.setText("No such file exists, Please try again: ");
        MalwareFlag.setVisible(false);
        positives.setVisible(false);
        totalScans.setVisible(false);
        deleteButton.setVisible(false);
    }

    public static void statusUpdater(String statusUpdate){
        
        appStatus.setText(StatusUpdate.statusUpdater(statusUpdate));
    }
}